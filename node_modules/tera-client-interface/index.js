const net = require('net');
const EventEmitter = require('events');

class TeraClientInterfaceConnection extends EventEmitter {
    constructor(socket) {
        super();
        this.setMaxListeners(0);

        this.socket = socket;
        this.buffer = null;

        this.socket.on('data', data => {
            this.buffer = this.buffer ? Buffer.concat([this.buffer, data]) : data;

            let start = 0;
            let end = -1;
            while ((end = this.buffer.indexOf(0, start)) >= 0) {
                if (end > start) {
                    const packet = this.buffer.slice(start, end);
                    try {
                        const parsed = JSON.parse(packet);
                        this.emit('data', parsed.command, parsed.data || {});
                    } catch (e) {
                        console.log(`[proxy] Error communicating with client:`);
                        console.log(e);
                    }
                }

                start = end + 1;
            }

            this.buffer = this.buffer.slice(start);
        });

        this.socket.once('error', e => {
            this.socket = null;
            this.emit('disconnect', e);
            this.removeAllListeners();
        });

        this.socket.once('close', () => {
            this.socket = null;
            this.emit('disconnect');
            this.removeAllListeners();
        });
    }

    send(command, data = {}) {
        if (this.socket)
            this.socket.write(JSON.stringify({ command, data }) + "\x00");
    }

    destructor() {
        if (this.socket) {
            this.socket.end();
            this.socket.destroy();
            this.socket = null;
        }
    }
}

class TeraClientInterfaceServer {
    constructor(host, port, onAccept, onReady, onError) {
        this.host = host;
        this.port = port;
        this.onAccept = onAccept;

        this.connections = new Set;

        this.server = net.createServer(socket => this.accept(socket));
        this.server.on('listening', () => onReady());
        this.server.on('error', e => onError(e));
    }

    destructor() {
        this.connections.forEach(connection => connection.destructor());
        this.connections.clear();

        this.server.close();
        this.server = null;

        this.onAccept = null;
    }

    run() {
        this.server.listen(this.port, this.host);
    }

    accept(socket) {
        socket.setNoDelay(true);

        const connection = new TeraClientInterfaceConnection(socket);
        this.connections.add(connection);
        socket.once('error', () => this.connections.delete(connection));
        socket.once('close', () => this.connections.delete(connection));

        this.onAccept(connection);
    }
}

module.exports = TeraClientInterfaceServer;

// Start scanning processes to inject the DLL
const path = require("path");
const { execFileSync } = require("child_process");
const ProcessListener = require("./process-listener");

function HandleAddedProcess(process) {
    try {
        execFileSync(path.join(__dirname, "injector.exe"), [process.pid, path.join(__dirname, "tera-client-interface.dll")]);
    } catch (e) {
        console.log(`[proxy] ERROR: Unable to connect to game client (PID ${process.pid})!`);
        switch (e.code) {
            case 'ENOENT':
            {
                console.log("[proxy] injector.exe does not exist. It has likely been deleted by your anti-virus.");
                console.log("[proxy] Disable/uninstall your anti-virus or whitelist tera-proxy and injector.exe!");
                break;
            }
            default:
            {
                switch (e.status) {
                    case 1:
                    {
                        console.log("[proxy] Connection to game client unsuccessful.");
                        console.log("[proxy] > Make sure that tera-proxy is running with Administrator privileges!");
                        console.log("[proxy] > Disable/uninstall your anti-virus or whitelist tera-proxy and injector.exe!");
                        break;
                    }
                    default:
                    {
                        console.log("[proxy] This is likely caused by your anti-virus interfering. Disable/uninstall it or whitelist tera-proxy.");
                        console.log("[proxy] Full error message:");
                        console.log(e);
                        break;
                    }
                }
                break;
            }
        }
    }
}

function HandleRemovedProcess(pid) {
    // Do nothing.
}

ProcessListener("TERA.exe", HandleAddedProcess, HandleRemovedProcess, 1000);
